// ################## Example 1: ##################

// ******************* interface **********************
export interface CommentsModel {
    postId: number;
    id: number;
    name: string;
    email: string;
    body: string;
}


// ****************  service file ******************
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CommentsModel } from './data-model';

@Injectable({
  providedIn: 'root'
})
export class ApiDataService {

  constructor(private http: HttpClient) { }

  getComments() {
    const url = 'https://jsonplaceholder.typicode.com/comments/?_limit=5';
    const httpOptions = {
      headers: new HttpHeaders({
         'Content-Type':  'application/json',
         Authorization: 'my-auth-token'
      }),
    };
    
    return this.http.get<CommentsModel[]>(
      url,
      httpOptions
    ).pipe(catchError(this.handleError));
  }



  private handleError(error: HttpErrorResponse) {
    if (error.status === 0) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong.
      console.error(
        `Backend returned code ${error.status}, body was: `,
        error.error
      );
    }
    // Return an observable with a user-facing error message.
    return throwError(
      () => new Error('Something bad happened; please try again later.')
    );
  }




}




// ***************** component js *******************
export class CommentsComponent implements OnInit, OnDestroy {
  comments: CommentsModel[] = [];
  commentsSubscription!: Subscription;

  constructor(private apiDataService: ApiDataService) { }

  ngOnInit(): void {
    this.commentsSubscription = this.apiDataService.getComments().subscribe({
      next: commentsData => {
        this.comments = commentsData;
      },
      error: () => {
        console.error('getComments subscribsion error');
      },
      complete: () => {
        console.log('getComments subscribsion completed ...');
      }
    });
  }

  ngOnDestroy(): void {
    this.commentsSubscription.unsubscribe();
  }
}




// **************** app.module.ts **************
// 1. you need import 'HttpClientModule' to your app.module.ts
//
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }























// ################## Example 2: #####################
// ************ data.model.ts *************
export interface UsersModel {
    id: number;
    name: string;
    username: string;
    email: string;
    city: string;
    street: string;
}





// ************ api.data.service **************
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { UsersModel } from './data.model';
import { map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})


export class ApiDataService {

  constructor(private http: HttpClient) { }

  getUsersAddress() {
    const url = 'https://jsonplaceholder.typicode.com/users/?_limit=3';
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type':  'application/json',
         Authorization: 'my-auth-token'
      })
    };
    return this.http.get<any>(
      url,
      httpOptions
    )
    // 1. here we want change our response.
    // 2. we will use map() operator in order to change object 
    //    that we get from server as responce.
    // 3. we declare new object 'userAddressData' and we will
    //    assign to this object values from object that we get 
    //    from response.
    .pipe(
      map(
        usersData => {
         // create new object according to our interface. 
         const userAddressData: UsersModel[] = []; 
       
         // 1. we loop for our array of objects.
         // 2. 'userData' is each object in our array.
         for (const userData of usersData) {
           // 1. we assign new vakues to 'userAddressData'
           //    array of objects. Then we will return this new object
           //    and in html page we will subscribe to current method and we will
           //    get new updated object according to our 'UsersModel' interface.
           userAddressData.push({
            id: userData.id,
            name: userData.name,
            username: userData.username,
            email: userData.email,
            city: userData.address.city,
            street: userData.address.street
           });
           
         }
          // 1. here we return new updated object.
          // 2. this object take only part of values from object 
          //    that we get from response.
          return userAddressData;
        }
      )
    );
  }
}




// ************** users.component.ts ***************
import { OnDestroy } from '@angular/core';
import { Component, OnInit } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { ApiDataService } from '../shared/api-data.service';
import { UsersModel } from '../shared/data.model';


@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit, OnDestroy {

  usersAddressSubscription!: Subscription;

  usersAddressData: UsersModel[] = [];

  constructor(private apiDataService: ApiDataService) { }

  ngOnInit(): void {
    
    // user address data
    this.usersAddressSubscription = this.apiDataService.getUsersAddress().subscribe({
      next: usersAddressData => {
        this.usersAddressData = usersAddressData;
        console.log(this.usersAddressData);
      },
      error: () => {
        console.log('error in getUsersAddress');
      }
    });


  }

  ngOnDestroy(): void {
    this.usersSubscription.unsubscribe();
    this.usersAddressSubscription.unsubscribe();
  }

}





// ************** users.component.html ***************
<section class="users">
    <table>
        <thead>
            <tr>
                <th>Id:</th>
                <th>Name:</th>
                <th>UserName:</th>
                <th>Email:</th>
                <th>City:</th>
                <th>Street:</th>
            </tr>
        </thead>
        <tbody>
            <tr *ngFor="let userAddressData of usersAddressData">
                <td >{{userAddressData.id}}</td>
                <td>{{userAddressData.name}}</td>
                <td>{{userAddressData.username}}</td>
                <td>{{userAddressData.email}}</td>
                <td>{{userAddressData.city}}</td>
                <td>{{userAddressData.street}}</td>
            </tr>
        </tbody>
    </table>
</section>







// ************** users.component.html ***************
.users table td {
    border: 1px solid #000000;
    padding:5px;
    text-align: center;
}

.users table th {
    border: 1px solid #000000;
    padding:5px;
    text-align: center;
}















// ################## Example 3: #####################
// ************ products.service.ts *************
import { Injectable } from '@angular/core';
import { catchError, map, Observable, tap, throwError } from 'rxjs';
import { Product } from './products.interface';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class ProductService {
  private productsUrl = 'https://jsonplaceholder.typicode.com/posts?_limit=3';

  constructor(private http: HttpClient) { }


  getProducts(): Observable<Product[]> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.get<Product[]>(this.productsUrl, { headers })
      .pipe(
        tap(data => console.log(JSON.stringify(data))),
        catchError(this.handleError)
      );
  }




  deleteProduct(id: number): Observable<{}> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    const url = `${this.productsUrl}/${id}`;
    return this.http.delete<Product>(url, { headers })
      .pipe(
        tap(data => console.log('deleteProduct: ' + id)),
        catchError(this.handleError)
      );
  }



  updateProduct(product: Product): Observable<Product> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    const url = `${this.productsUrl}/${product.id}`;
    return this.http.put<Product>(url, product, { headers })
      .pipe(
        tap(() => console.log('updateProduct: ' + product.id)),
        // Return the product on an update
        map(() => product),
        catchError(this.handleError)
      );
  }



  private handleError(error: HttpErrorResponse) {
    if (error.status === 0) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong.
      console.error(
        `Backend returned code ${error.status}, body was: `, error.error);
    }
    // Return an observable with a user-facing error message.
    return throwError(() => new Error('Something bad happened; please try again later.'));
  }






}



// *********** products.interface.ts ************
/* Defines the product entity */
export interface Product {
    userId: number;
    id: number;
    title: string;
    body: string;
}






// ********** products.component.ts ************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { ProductService } from '../shared/product.service';


@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit, OnDestroy {

  constructor(
    private productService : ProductService ) { }


  productsSubscription!: Subscription;

  ngOnInit(): void {
      this.productsSubscription = this.productService.getProducts().subscribe(
        products => {
          console.log(products);
          
        }
      );
  }


  ngOnDestroy(): void {
    this.productsSubscription.unsubscribe();
  }

}
















// ################## Example 4: #####################
// ************** user.data.service.ts ***************
import {
  HttpClient,
  HttpErrorResponse,
  HttpHeaders,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, Observable, throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { UserModel } from './user-model';

@Injectable({
  providedIn: 'root',
})
export class UserDataService {
  constructor(private http: HttpClient) {}


  getUsers(): Observable<UserModel[]> {
    const url = 'https://jsonplaceholder.typicode.com/users/?_limit=3';
    const httpOptions = {
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Key: 'XYZ123KPY483',
      }),
    };
    return this.http.get<UserModel[]>(url, httpOptions).pipe(
      map((userData) => {
        const newUserData: UserModel[] = [];
        let index = 1;
        for (const uData of userData) {
          newUserData.push({
            id: index,
            name: uData.name,
            username: uData.username,
            email: uData.email,
          });
          index++;
        }

        return newUserData;
      }),
      catchError(this.handleError)
    );
  }




  private handleError(error: HttpErrorResponse) {
    if (error.status === 0) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong.
      console.error(
        `Backend returned code ${error.status}, body was: `,
        error.error
      );
    }
    // Return an observable with a user-facing error message.
    return throwError(
      () => new Error('Something bad happened; please try again later.')
    );
  }



}







// ************** app.component.ts ***************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { UserDataService } from './user-data.service';
import { UserModel } from './user-model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit, OnDestroy {
  userDataSubscription!: Subscription;
  userData: UserModel[] = [];
  isError: boolean = false;

  constructor(private userDataService: UserDataService) {}



  onLoadData() {
    this.userDataSubscription = this.userDataService.getUsers().subscribe({
      next: (data) => {
        this.userData = data;
        console.log(data);
        
      },
      error: () => {
        this.isError = true;
      },
      complete: () => {
        console.log('Data was loaded ...');
      },
    });
  }

  

  ngOnInit(): void {}

  ngOnDestroy(): void {
    this.userDataSubscription.unsubscribe();
  }
}









// ************** app.component.html ***************
<section class="users">
  <div class="users-content">
    <p>
      <span>Here will be user data</span>
    </p>

    <ul *ngIf="!isError">
      <li *ngFor="let u of userData">
        {{ u.name }} - {{ u.username }} - {{ u.email }} - {{ u.id }}
      </li>
    </ul>

    <p *ngIf="isError">Error on page !!!</p>

    <p>
      <button (click)="onLoadData()">Load Data</button>
    </p>
  </div>
</section>






// ************** app.component.css ***************
.users {
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
    align-items: center;
}
   
    
.users-content {
    width: 500px;
    border:1px solid red;
}