// **************************************************************************
// **************************************************************************
// ****************************** Example 1: ********************************
// **************************************************************************
// **************************************************************************



// step 1: get data from back-end.
// step 2: use rxjs operators map and pipe.
// step 3: use js map function for array finter.
// step 4: use js filter function for find current user per id.


// ***************************** getUsers.service.ts ************************
import { Injectable } from "@angular/core";
import { GetUsersInterface } from "./getUsers.interface";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { catchError, find, map, Observable, of, pipe } from "rxjs";
import { Subject } from 'rxjs';

@Injectable({
    providedIn: 'root'
})

export class UsersService {

    constructor(
        private http: HttpClient
    ) {}


    getUsers() {
        const url = 'https://swapi.dev/api/people/?format=json';
        const httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.get<any>(url, httpOptions).pipe(
            map(response => {
                const listOfUsers = response.results;
                const newUsersArray = listOfUsers.map((user: any, index: number) => {
                    return { userId: index + 1, userName: user.name}
                });
                
                return newUsersArray;
            })
        );
    }





    getUser(id: number) {
        const url = 'https://swapi.dev/api/people/?format=json';
        const httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.get<any>(url, httpOptions).pipe(
            map(response => {
                const listOfUsers = response.results;
                const newUsersArray = listOfUsers.map((user: any, index: number) => {
                    return { userId: index + 1, userName: user.name}
                });

                const userPerId = newUsersArray.find((user: any) => user.userId === id);
                
                return userPerId;
            })
        );
    }
    
}






// ****************************** getUsers.interface.ts ***************************
export interface GetUsersInterface {
    userId: number;
    userName: string;
}






// **************************** user.component.ts ***************************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { UsersService } from 'src/app/shared/getUsers.service';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.css']
})
export class UserComponent implements OnInit, OnDestroy {

  constructor(
    private route: ActivatedRoute,
    private usersService: UsersService
  ) { }

  userId: number = 0;
  userName: string = '';  
  userSub!: Subscription;  

  ngOnInit(): void {
   
    // subscribe to page params,  if page url : 'http://localhost:4200/users/1'
    // result will be : {id: '1'}
    this.route.params.subscribe(
      (pageParamsResponse) => {
        this.userId = parseInt(pageParamsResponse['id']);
        
        this.userSub = this.usersService.getUser(this.userId).subscribe(
          response => {
            console.log(response);
            this.userName = response.userName;
          }
        );
      }
    );

  }

  ngOnDestroy(): void {
    this.userSub.unsubscribe();
  }

}





// ************************ user.component.html **********************
<p>
    user Id : {{ userId }}
</p>

<p>
    user name : {{ userName }}
</p>
