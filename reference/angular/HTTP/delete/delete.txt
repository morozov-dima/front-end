


// ************ products.service.ts *************
import { Injectable } from '@angular/core';
import { catchError, map, Observable, tap, throwError } from 'rxjs';
import { Product } from './products.interface';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})

export class ProductService {
  private productsUrl = 'https://jsonplaceholder.typicode.com/posts?_limit=3';

  constructor(private http: HttpClient) { }


  getProducts(): Observable<Product[]> {
    const httpOptions = {
      headers: new HttpHeaders({
         'Content-Type':  'application/json'
      }),
    };
    return this.http.get<Product[]>(this.productsUrl, httpOptions)
      .pipe(
        tap(data => console.log(JSON.stringify(data))),
        catchError(this.handleError)
      );
  }



  // we send id of 'item' that we whant to delete.
  deleteProduct(id: number): Observable<{}> {
    const httpOptions = {
      headers: new HttpHeaders({
         'Content-Type':  'application/json'
      }),
    };
    const url = `${this.productsUrl}/${id}`;
    return this.http.delete<Product>(url, httpOptions)
      .pipe(
        tap(data => console.log('deleteProduct: ' + id)),
        catchError(this.handleError)
      );
  }



  updateProduct(product: Product): Observable<Product> {
    const httpOptions = {
      headers: new HttpHeaders({
         'Content-Type':  'application/json'
      }),
    };
    const url = `${this.productsUrl}/${product.id}`;
    return this.http.put<Product>(url, product, httpOptions)
      .pipe(
        tap(() => console.log('updateProduct: ' + product.id)),
        // Return the product on an update
        map(() => product),
        catchError(this.handleError)
      );
  }



  private handleError(error: HttpErrorResponse) {
    if (error.status === 0) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong.
      console.error(
        `Backend returned code ${error.status}, body was: `, error.error);
    }
    // Return an observable with a user-facing error message.
    return throwError(() => new Error('Something bad happened; please try again later.'));
  }






}



// *********** products.interface.ts ************
export interface Product {
    userId: number;
    id: number;
    title: string;
    body: string;
}






// ********** products.component.ts ************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { ProductService } from '../shared/product.service';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})

export class ProductsComponent implements OnInit, OnDestroy {

  constructor(
    private productService : ProductService
   ) { }


  productsSubscription!: Subscription;

  ngOnInit(): void {
      this.productsSubscription = this.productService.getProducts().subscribe(
        products => {
          console.log(products);
          
        }
      );
  }


  ngOnDestroy(): void {
    this.productsSubscription.unsubscribe();
  }

}






