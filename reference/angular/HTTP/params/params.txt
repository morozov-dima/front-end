// **************************************************************************
// ****************************** Example 1: ********************************
// **************************************************************************


// ************ user-data.service.ts *************
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { catchError, Observable, throwError } from 'rxjs';
import { Posts } from './user-data';

@Injectable({
  providedIn: 'root'
})

export class UserDataService {


  constructor(private http: HttpClient) { }


      // get posts data from server
      getPosts(): Observable<Posts[]> {
        const url = 'https://jsonplaceholder.typicode.com/posts';

        const options = {
          // You can also create HTTP parameters directly
          // from a query string by using the fromString variable (this is angular variable from HttpParams)
          params: new HttpParams({
            fromString: '_limit=2'
          }),
          // Adding and updating headers
          headers: new HttpHeaders({
            Authorization: 'my-auth-token-xysdgfhejwjfe'
          })
        };

        return this.http.get<Posts[]>(url, options).pipe(
          catchError(errorRes => {
            throw 'error in get posts response' + errorRes;
          })
        );
      }


}




// ************ user-data.ts *************
export interface Posts {
    userId: number;
    id: number;
    title: string;
    body: string;
}




// ************ promotions.component.ts *************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { Posts } from '../shared/user-data';
import { UserDataService } from '../shared/user-data.service';

@Component({
  selector: 'app-promotions',
  templateUrl: './promotions.component.html',
  styleUrls: ['./promotions.component.css']
})
export class PromotionsComponent implements OnInit, OnDestroy {

  posts: Posts[] = [];
  posts$Subscription!: Subscription;

  showError: boolean = false;

  constructor(private userDataService: UserDataService) { }

  ngOnInit(): void {
    //get posts data from service
    this.posts$Subscription = this.userDataService.getPosts().subscribe({
      next: (postsData) => {
        this.posts = postsData;
      },
      error: () => {
        // show error message
        this.showError = true;
      },
      complete: () => {
        console.log('get posts subscribe completed !!!');
      }
    }); 
 }



  ngOnDestroy(): void {
      this.posts$Subscription.unsubscribe();
  }

}










// **************************************************************************
// ****************************** Example 2: ********************************
// **************************************************************************


// ************************* todo-data.service.ts **************************
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { catchError, Observable, throwError } from "rxjs";
import { Todos } from "./todo-interface";
import { environment } from "src/environments/environment";

@Injectable({
    providedIn: 'root'
})

export class TodoDataService {
    constructor(private http: HttpClient) {}
    apiKey: string = environment.apiKey;

    fetchToDos(): Observable<Todos[]>{
        const url = 'https://jsonplaceholder.typicode.com/todos/?_limit=5';
        const httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            }),
            params: new HttpParams().set('apiKey', this.apiKey)
        };
        return this.http.get<Todos[]>(url, httpOptions).pipe(
            catchError(this.handleError)
        );
    }



    saveTodos(todosList: Todos[]) {
        const url = 'https://jsonplaceholder.typicode.com/todos';
        const httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            }),
            params: new HttpParams().set('apiKey', this.apiKey)
        };
        return this.http.post(url, todosList, httpOptions).pipe(
            catchError(this.handleError)
        );
    }    



    private handleError(error: HttpErrorResponse) {
        if (error.status === 0) {
          console.error('An error occurred:', error.error);
        } else {
          console.error(
            `Backend returned code ${error.status}, body was: `, error.error);
        }
        return throwError(() => new Error('Something bad happened; please try again later.'));
      }


}





// ************************** environment.ts ***************************
export const environment = {
  production: false,
  apiKey : 'DFDGDFFGD54543FGFDGFDGFDGFDGFDG'
};



// ************************ todo-interface.ts **************************
export interface Todos {
    userId: number;
    id: number;
    title: string;
    completed: boolean;
}