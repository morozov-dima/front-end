// *************************************************************************
// ********************************* Example  ******************************
// *************************************************************************




// 1. text animated from top to bottom
// ************* app.component.html **********
  <div class="content">
    <div [@animateState]="state" class="animated-text">
      <ul>
        <li *ngFor="let post of posts$ | async">
          {{post.id}} - {{post.title}}
        </li>
      </ul>
    </div>






// ************ app.component.css ************
.content{
    width: 300px;
    position: relative;
}

.content ul li {
    list-style: none;
}

.content ul {
    text-align: left;
}

.animated-text {
    position: absolute;
}





// *********** app.component.ts *************
import { Component, OnInit } from '@angular/core';
import {
  trigger,
  state,
  style,
  animate,
  transition,
  // ...
} from '@angular/animations';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  animations: [
    trigger('animateState', [
      state('show', style({
        opacity: '1',
        top: '0px'
      })),
      state('hide', style({
        opacity: '0',
        top: '-230px'
      })),
      transition('hide => show', [
        animate('1s  ease-out')
      ])
    ])      
  ]
})



export class AppComponent implements OnInit{
  isAnimate: boolean = false;
  state: string = 'hide';
  constructor() {}

  ngOnInit(): void {
    setTimeout(() => {
      this.state = 'show';
    }, 1000);
  }

}




















// *************************************************************************
// ********************************* Example  ******************************
// *************************************************************************


/ ************************* app.component.html ***************************
<button (click)="onAnimate()">animate</button>
<button (click)="boxState = 'special'">Set Special State</button>
<hr>
<div class="wrap">
  <div class="box" [@box]="boxState">
    <h4>
      {{ boxState | uppercase }}
    </h4>
  </div>
</div>







// *********************** app.animations.ts *****************************
import { animate, group, keyframes, query, state, style, transition, trigger } from "@angular/animations";

export const boxAnimation =  trigger('box', [

    // state name 'start'
    state('start', style({
      background: 'blue'      // style for 'start' state.
    })),


    // state name 'end'
    state('end', style({
      background: 'red',      // style for 'end' state.
      transform: 'scale(1.2)' // style for 'end' state (element will be bigger)
    })),

    // state name 'special'
    state('special', style({
      background: 'orange',     // style for 'special' state.
      transform: 'scale(0.5)',  // style for 'special' state (element will be smaller)
      borderRadius: '50%'       // style for 'special' state.
    })),


    transition('start => end', animate(450)), // 450 mili sec (fadeIn)


    transition('end => start', animate('800ms ease-in-out')), // 800 mili sec (fadeOut)

    // from 'special' state to 'any' state and from 'any' state to 'special' state
    // we can create animation steps.
    transition('special <=> *', [ 

      // we want execute our methods in parallel.
      group([
        query('h4', animate(1500, style({
          fontSize: '.5rem',
          color: 'red'
        }))),
        style({ background: 'green' }), // first we set this style
        animate('1s', style({ // when our animation end we can set new style: background: 'pink'
          background: 'pink'
        })),
        animate(750) // our background: 'pink' will be animated during 750 mili sec.
      ])
    ]),



    // 'void => *' we can write this ':enter'
    // this is like - 'show'
    // 'void' - this is when element dosen't exist (any element that dosen't exist)
    // from 'void' to 'any' state
    transition(':enter', [
      animate('4s', keyframes([
        style({ background: 'red', offset: 0 }),       // step 1 
        style({ background: 'black', offset: 0.2 }),   // step 2, 20% from 4 sec
        style({ background: 'orange', offset: 0.3 }),  // step 3,  30% from 4 sec
        style({ background: 'blue', offset: 1 })       // step 4
      ]))
      //style({ opacity: 0 }),
      //animate('850ms ease-out')
    ]),




    // from 'any' state to 'void' 
    // this is like 'hide'.
    // '* => void' we can write this ':leave'
    transition(':leave', [
      style({opacity: 1}), // from 'opacity: 1' - initial state.

          // 'group' - run animations in parallel !!!!!!!!!
          //
          //
          // ####### sequence #######
          // we can also add method 'sequence' this is default. in this case animations will run after each other.
          //
          // this two animations will be in parallel.
          // animation 1 will be parallel to animation 2.
          group([
            // animation 1
            animate(750, style({
              opacity: 0, // to 'opacity: 0'
              transform: 'scale(1.2)' // our element will be bigger.
            })),
            // animation 2
            animate(300, style({
              color: '#000000',
              fontWeight: 'bold'
            }))
          ])

    ])

  ])











// ************************* app.component.ts *****************************
import { AnimationEvent } from '@angular/animations';
import { Component, OnInit } from '@angular/core';
import { boxAnimation } from './app.animations';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  animations: [ boxAnimation]
})

export class AppComponent implements OnInit {

  // set initial state
  boxState: string = 'start'

  visible: boolean = true;

  ngOnInit(): void {
    
  }

  onAnimate() {
    this.boxState = this.boxState === 'end' ? 'start' : 'end';
  }


  // our event have special tyle : "AnimationEvent"
  animationStarted(event: AnimationEvent) {
    console.log(event);
  }


  animationDone(event: AnimationEvent) {
    console.log(event);
  }   

}









// ************************ app.component.css ************************
.wrap {
  padding-top: 3rem;
  width:  500px;
  margin: 0 auto;  
  display: flex;
  justify-content: center;
  flex-direction: row;
}



.box {
    width: 120px;
    height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: row;
    color:#ffffff;
}









// ************************* app.module.ts ****************************
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }























// *************************************************************************
// ********************************* Example  ******************************
// *************************************************************************


