

// Example 1
//  ********* Sending a GET Request **********
// "GET" data from server.
// This way you can get dynamic content from server and display it into
// your application.
// '200' this is status that we get back from server when we get data from server.
// In this example we use 'XMLHttpRequest'.

const http = new XMLHttpRequest();

// send request to this url.
const url = 'https://jsonplaceholder.typicode.com/posts?_limit=2';

// we can GET request (get data from server).
const method = 'GET';

http.open(method, url);
http.onreadystatechange = function() {
  if(http.readyState === XMLHttpRequest.DONE && http.status === 200) {
    // here we transform our data that we get from server into javascript object.
    console.log(JSON.parse(http.responseText));
  } else if (http.readyState === XMLHttpRequest.DONE && http.status !== 200) {
    console.log('Error!');
  }
};


// send request
http.send();













// Example 2
// ********** Sending a POST Request ***********
// This way you can send data to server
// '201' this is status that we get back from server when a resource was created
// In this example we use 'XMLHttpRequest'.

const http = new XMLHttpRequest();

// send request to this url.
const url = 'https://jsonplaceholder.typicode.com/posts?_limit=2';

// we can POST request (send data to server).
const method = 'POST';

// data that we send to server
const data = 'title=Post%20Title&body=Body';

http.open(method, url);

// set headers for our request
http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

http.onreadystatechange = function() {

  if(http.readyState === XMLHttpRequest.DONE && http.status === 201) {
    // here we transform our data that we get from server into javascript object.
    console.log(JSON.parse(http.responseText));
  } else if (http.readyState === XMLHttpRequest.DONE && http.status !== 201) {
    console.log('Error!');
  }
};


// send request
http.send(data);




// ********* response from server **********
// this is dummy data that we get from 'jsonplaceholder' when we send 'POST' request.
/*
{
  body: "Body",
  id: 101,
  title: "Post Title"
}
*/












// Example 3

// ********** js file ************

// 1. link to documentation : https://developer.mozilla.org/en-US/docs/Web/API/fetch
// 2. in this example we get data from server and display this data 
//    in our html.
// 3. fetch return promise.

document.querySelector('#load').addEventListener('click', load);

function load() {
    const url = 'https://jsonplaceholder.typicode.com/users';
   
    // fetch return promise.
    fetch(url)
    .then(response => {
       return response.json();
    })
    .then(data => {
       const ul = document.querySelector('#list');
       const html = data.map(item => {
        return `<li>${item.id} ${item.name} (${item.email})</li>`;
       });
       
      ul.insertAdjacentHTML('afterbegin', html.join(' '));
    });
}




// ********** html file ***********
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="assets/scripts/fetch.js" defer></script>
</head>
<body>
    <h1>Async JavaScript</h1>
    <hr>
    <button id="load">Upload users</button>
    <hr>

    <ul id="list"></ul>


</body>
</html>














// Example 4

// ********** html file ************

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Http</title>
    <link rel="stylesheet" href="assets/styles/app.css" />
    <script src="assets/scripts/app.js" defer></script>
  </head>
  <body>


    <!-- delete current post begin -->
    <template id="single-post">
      <li class="post-item">
        <h2></h2>
        <p></p>
        <button>DELETE</button>
      </li>
    </template>
    <!-- delete current post begin -->


    <!-- create new post begin -->
    <section id="new-post">
      <form>
        <div class="form-control">
          <label for="title">Title</label>
          <input type="text" id="title" name="title" />
        </div>
        <div class="form-control">
          <label for="content">Content</label>
          <textarea rows="3" id="content" name="body"></textarea>
        </div>
        <button type="submit">ADD</button>
      </form>
    </section>
    <!-- create new post end -->


    <!-- load data from server begin -->
    <section id="available-posts">
      <button>FETCH POSTS</button>
      <ul class="posts"></ul>
    </section>
    <!-- load data from server end -->

  </body>
</html>





// ********** js file ************
const listElement = document.querySelector('.posts');
const postTemplate = document.getElementById('single-post');
const form = document.querySelector('#new-post form');
const fetchButton = document.querySelector('#available-posts button');
const postList = document.querySelector('ul');




  fetchButton.addEventListener('click', fetchPosts);
  form.addEventListener('submit', event => {
      event.preventDefault();
      const enteredTitle = event.currentTarget.querySelector('#title').value;
      const enteredContent = event.currentTarget.querySelector('#content').value;
      createPost(enteredTitle, enteredContent);


  });


    // get data from server
    function fetchPosts() {
        sendHttpRequest('GET', 'https://jsonplaceholder.typicode.com/posts')
        .then((responseData) => {
                //const listOfPosts = JSON.parse(xhr.response);
                const listOfPosts = responseData;   // if we add "xhr.responseType = 'json';" we can not use "JSON.parse "
                for (const post of listOfPosts) {
                     const postEl = document.importNode(postTemplate.content, true);    // importNode() method creates a copy of a Node
                     postEl.querySelector('h2').textContent = post.title.toUpperCase();
                     postEl.querySelector('p').textContent = post.body;
                     listElement.append(postEl);
                }
        });
    }




    function sendHttpRequest(method, url, data){
        return fetch(url, {
            method:  method,
            // body: JSON.stringify(data),
            body: data,
            // headers: {
            // 'Content-Type': 'application/json' 
            // }
        }).then(response => {
            if (response.status >= 200 && response.status < 300) { // success case
                return response.json(); 
            } else {
                return response.json().then(errData => {
                    console.log(errData);
                    throw new Error('Something went wrong - server-side.');
                })
            }
        }).catch(error => {
            console.log(error);
            throw new Error('Something went wrong!');
        }); 

    }





    // send data to server
    async function createPost(title, content) {
        const userId = Math.random();
        const post = {
          title: title,
          body: content,
          userId: userId 
        };

        const fd = new FormData(form);
        //  fd.append('title', title);
        //  fd.append('body', content);
        fd.append('userId', userId);

        //sendHttpRequest('POST', 'https://jsonplaceholder.typicode.com/posts', post);
        sendHttpRequest('POST', 'https://jsonplaceholder.typicode.com/posts', fd);
    }




    // delete post
    postList.addEventListener('click', event => {
        if(event.target.tagName === 'BUTTON') {
            const postId = event.target.closest('li').id;
            sendHttpRequest('DELETE', `https://jsonplaceholder.typicode.com/posts/${postId}`);                
        }
    });


















// Example 4 (with AXIOS)
// 1. link to documentation: https://axios-http.com/docs/post_example
// 2. we need connect 'https://unpkg.com/axios/dist/axios.min.js' to out html page.
// 3. you can also install 'axios' with npm.

// ********** html file ************
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Http</title>
    <link rel="stylesheet" href="assets/styles/app.css" />
    <script src="https://unpkg.com/axios/dist/axios.min.js" defer></script>
    <script src="assets/scripts/app.js" defer></script>
  </head>
  <body>

    <!-- delete post begin -->  
    <template id="single-post">
      <li class="post-item">
        <h2></h2>
        <p></p>
        <button>DELETE</button>
      </li>
    </template>
    <!-- delete post end -->


    <!-- create new post begin -->
    <section id="new-post">
      <form>
        <div class="form-control">
          <label for="title">Title</label>
          <input type="text" id="title" name="title" />
        </div>
        <div class="form-control">
          <label for="content">Content</label>
          <textarea rows="3" id="content" name="body"></textarea>
        </div>
        <button type="submit">ADD</button>
      </form>
    </section>
    <!-- create new post end -->


    <!-- load data from server begin -->
    <section id="available-posts">
      <button>FETCH POSTS</button>
      <ul class="posts"></ul>
    </section>
        <!-- load data from server end -->

  </body>
</html>








// ************ js file ***************
       
const listElement = document.querySelector('.posts');
const postTemplate = document.getElementById('single-post');
const form = document.querySelector('#new-post form');
const fetchButton = document.querySelector('#available-posts button');
const postList = document.querySelector('ul');


// get data from server
// link to documentation : https://axios-http.com/docs/req_config
async function fetchPosts() {
    try {
        const response = await axios.get(
            'https://jsonplaceholder.typicode.com/posts', {
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                params: {
                    a: 11111.22222
                }
              }
            );
        console.log(response);
            const listOfPosts = response.data; 
            for (const post of listOfPosts) {
                    const postEl = document.importNode(postTemplate.content, true);    // importNode() method creates a copy of a Node
                    postEl.querySelector('h2').textContent = post.title.toUpperCase();
                    postEl.querySelector('p').textContent = post.body;
                    postEl.querySelector('li').id = post.id;                
                    listElement.append(postEl);
            }
    } catch (error) {
        console.error("Our error is : " + error.message);
        console.log(error.response);
    }
}



// send data to server
async function createPost(title, content) {
     const userId = Math.random();
     const post = {
       title: title,
       body: content,
       userId: userId 
     };

     const fd = new FormData(form);
    //  fd.append('title', title);
    //  fd.append('body', content);
     fd.append('userId', userId);

    // const response = await axios.post('https://jsonplaceholder.typicode.com/posts', post);
    const response = await axios.post(
            'https://jsonplaceholder.typicode.com/posts',
            fd,
            {
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                params: {
                    a: 11111.22222
                }
            }
         );
    //console.log(response);
}


fetchButton.addEventListener('click', fetchPosts);
form.addEventListener('submit', event => {
    event.preventDefault();
    const enteredTitle = event.currentTarget.querySelector('#title').value;
    const enteredContent = event.currentTarget.querySelector('#content').value;
    createPost(enteredTitle, enteredContent);


});

createPost('DUMMY', 'A dummy post!');



// delete post
postList.addEventListener('click', event => {
    if(event.target.tagName === 'BUTTON') {
        const postId = event.target.closest('li').id;
        axios.delete(
            `https://jsonplaceholder.typicode.com/posts/${postId}`,
            {
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                params: {
                    a: 11111.22222
                }
            }
        );                
    }
});











// Example 5 (send httpRequest with fetch)
// ********** html file ************

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Arrays & Iterables</title>
  <link rel="stylesheet" href="style.css" />
  <script src="app.js" defer></script>
  

</head>
<body>
  <section class="user-data">
    <!-- input userName field begin -->
    <p>
      <label for="userName">User Name:</label>
      <input type="text" name="userName" id="userName" >
    </p>
    <!-- input userName field end -->

    <!-- input email field begin -->
    <p>
      <label for="email">Email</label>
      <input type="email" name="email" id="email">
    </p>
    <!-- input email field end -->

    <!-- submit form button begin -->
    <p class="send-data">
      <button>Send</button>
    </p>
    <!-- submit form button end -->

    <p class="result">

    </p>
  </section>

</body>
</html>







// ********** js file ************
const userButton = document.querySelector('.send-data button');
const userNameInput = document.getElementById('userName');
const emailInput = document.getElementById('email');

let resultElement = document.querySelector('.result');
let responseId = null;

userButton.addEventListener('click', submitForm);


function submitForm() {
    const url = 'https://jsonplaceholder.typicode.com/posts';
    fetch(url, {
        method: 'POST',
        // body: JSON.stringify({
        //     userName: 'userNameInput',
        //     email: 'email'
        // }),
        body: JSON.stringify([
            { userName: 'userNameInput', email: 'email' },
            { userName: 'userNameInput2', email: 'email2' },
            { userName: 'userNameInput3', email: 'email3' },
            { userName: 'userNameInput4', email: 'email4' }
        ]),
        headers: {
          'Content-type': 'application/json; charset=UTF-8'
        },
      })
        .then(
            (response) => response.json()
        )
        .then(
            (json) => {
                console.log(json)
                console.log(json.id);
                responseId = json.id
                resultElement.innerHTML = json.id;
            }
        );
}