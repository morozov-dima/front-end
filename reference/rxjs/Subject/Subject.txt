// ************************************************************************
// ***************************** Example 1 ********************************
// ************************************************************************


// ************ training.service.ts **************
import { Subject } from 'rxjs';
import { Exercise } from './exercise.model';

export class TrainingService {
  exerciseChanged = new Subject<Exercise | null>();

  private runningExercise: any;

  startExercise(selectedId: string) {
    // we send data with next (we use copy of our object)
    // we send 'this.runningExercise' to our Subject
    this.exerciseChanged.next({ ...this.runningExercise });
  }

}




// ************* training.component.ts *****************
import { OnDestroy } from '@angular/core';
import { Component, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { TrainingService } from './training.service';


@Component({
  selector: 'app-training',
  templateUrl: './training.component.html',
  styleUrls: ['./training.component.css']
})

export class TrainingComponent implements OnInit, OnDestroy {
  ongoingTraining: boolean = false;
  exerciseSubscription!: Subscription;

  constructor(private trainingService: TrainingService) { }

  ngOnInit(): void {
    this.exerciseSubscription = this.trainingService.exerciseChanged.subscribe(
      exercise => {
        if (exercise) {
          this.ongoingTraining = true;
        } else {
          this.ongoingTraining = false;
        }
      }
    );
  }


  ngOnDestroy(): void {
    if (this.exerciseSubscription) {
      this.exerciseSubscription.unsubscribe();
    }
  }

}

























// ************************************************************************
// ***************************** Example 2 ********************************
// ************************************************************************



// ******************** game-control.component.html ***********************
<button (click)="onStartGame()">Start Game</button>
<app-even></app-even>
<app-odd></app-odd>









// ******************** game-control.component.ts ***********************
import { Component } from '@angular/core';
import { NumbersService } from '../events.service';
 

@Component({
  selector: 'app-game-control',
  templateUrl: './game-control.component.html',
  styleUrls: ['./game-control.component.css']
})
export class GameControlComponent  {

  constructor(
        private numbersService: NumbersService
      ) { }

  onStartGame() {
    this.numbersService.startCounter();
  }

}







// ******************** events.service.ts ***********************
import { Injectable, OnInit } from "@angular/core";
import { interval, Subject, take } from "rxjs";

@Injectable({
    providedIn: 'root'
})

export class NumbersService implements OnInit {
    counterEvents: Subject<number> = new Subject<number>()

    constructor() {}

    startCounter() {
        const time = 1000; // 1sec

        // start count from this number
        let number: number = 1;

        // set interval with RxJS
        const numbers = interval(time);
        const takePartOfNumbers = numbers.pipe(
            // take 8 events only
            take(8)
        );

        takePartOfNumbers.subscribe(() => {
            // send events outside 
            this.counterEvents.next(number);
            number++;
        });
    }

    ngOnInit(): void {

    }
    

}







// ******************** even.component.ts ***********************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { filter, map, Subscription } from 'rxjs';
import { NumbersService } from '../events.service';

@Component({
  selector: 'app-even',
  templateUrl: './even.component.html',
  styleUrls: ['./even.component.css']
})
export class EvenComponent implements OnInit, OnDestroy {
  evenNumber!: number;
  eventNumberSub!: Subscription;

  constructor(private numbersService: NumbersService) { }

  ngOnInit(): void {

   this.eventNumberSub = this.numbersService.counterEvents
    .pipe(
      // pass only event numbers
      filter((number) => { 
          return number % 2 === 0
        }
      )
    )
    .subscribe({
      next: (number) => {
          this.evenNumber = number;
      }
    });
  }


  ngOnDestroy(): void {
    this.eventNumberSub.unsubscribe();
  }

}









// ******************** even.component.html ***********************
<p>even component</p>

<p [ngStyle]="{
    'background-color': 'blue',
    'color': '#ffffff'
    }">
    {{ evenNumber }}
</p>










// ******************** odd.component.ts ***********************
import { Component, OnDestroy, OnInit } from '@angular/core';
import { filter, Subscription } from 'rxjs';
import { NumbersService } from '../events.service';

@Component({
  selector: 'app-odd',
  templateUrl: './odd.component.html',
  styleUrls: ['./odd.component.css']
})
export class OddComponent implements OnInit, OnDestroy {
  oddNumber!: number;
  oddNumberSub!: Subscription;

  constructor(private numbersService: NumbersService) { }

  ngOnInit(): void {
    this.oddNumberSub = this.numbersService.counterEvents
    .pipe(
      filter(number => number % 2 !== 0)
    )
    .subscribe((number) => {
      this.oddNumber = number;
    });
  }

  ngOnDestroy(): void {
    
  }

}







// *********************** odd.component.html **************************
<p>odd number</p>

<p [ngStyle]="{
        'background-color': 'red',
        'color': '#ffffff'
    }" >
    {{ oddNumber }}
</p>



















// ************************************************************************
// ***************************** Example 3 ********************************
// ************************************************************************

// Passing data between two components
// We send data from 'users.component.ts' to 'getUsers.service.ts' service
// And them 'user.component.ts' component get data from 'getUsers.service.ts' service



// ************************ users.component.ts ********************
import { Component } from '@angular/core';
import { Subscription } from 'rxjs';
import { GetUsersInterface } from '../shared/getUsers.interface';
import { UsersService } from '../shared/getUsers.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent {

  constructor(private usersService: UsersService) { }

  onSendData() {
    const number = 100;
    this.usersService.userData.next(number); // <= ##################### send data with Subject ######################
  }

}







// ********************* getUsers.service.ts **********************
import { Injectable } from "@angular/core";
import { GetUsersInterface } from "./getUsers.interface";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { catchError, map, pipe } from "rxjs";
import { Subject } from 'rxjs';

@Injectable({
    providedIn: 'root'
})

export class UsersService {
    userData = new Subject<number>(); // <= ###################### connection of data #########################

    constructor(
        private http: HttpClient
    ) {}



    getUsers() {
        const url = 'https://swapi.dev/api/people/';
        const httpOptions = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.get<any>(url, httpOptions).pipe(
            map(response => {
                const listOfUsers = response.results;
                const newUsersArray = listOfUsers.map((user: any, index: number) => {
                    return { userId: index + 1, userName: user.name}
                });
                
                return newUsersArray;
            })
        );
    }
    
}







// ************************** user.component.ts ***********************
import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { filter, find, map, Subscription } from 'rxjs';
import { GetUsersInterface } from 'src/app/shared/getUsers.interface';
import { UsersService } from 'src/app/shared/getUsers.service';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.css']
})
export class UserComponent implements OnInit {

  constructor(
    private route: ActivatedRoute,
    private usersService: UsersService
  ) { }
  userId: string = '';
  paramsSub!: Subscription;

  ngOnInit(): void {
    console.log(this.userId);
    // subscribe to page params,  if page url : 'http://localhost:4200/users/1'
    // result will be : {id: '1'}
    this.route.params.subscribe(
      (pageParamsResponse) => {
        console.log(pageParamsResponse);
        this.userId = pageParamsResponse['id'];
      }
    );

    this.usersService.userData.subscribe(
      (response) => {
        console.log(response);
      }
    );


  }




}
